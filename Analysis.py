# -*- coding: utf-8 -*-
"""Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rLhDOIYW71BAa6zsA9z6_cdnahLKKI4q
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Cleaning of the data



# Mergin g 12 months data into a single file

df = pd.read_csv('/content/drive/MyDrive/Project 2/Pandas-Data-Science-Tasks/Sales_April_2019.csv')

all_months_data = pd.DataFrame()

files = [file for file in os.listdir('/content/drive/MyDrive/Project 2/Pandas-Data-Science-Tasks')  ]

for file in files:
  df = pd.read_csv('/content/drive/MyDrive/Project 2/Pandas-Data-Science-Tasks/'+file)
  all_months_data = pd.concat([all_months_data,df])

all_months_data.to_csv('all_data.csv',index=False)

all_months_data.head()

all_months_data.head(20)

# Cleaning of the data

nan_df = all_months_data[all_months_data.isna().any(axis=1)]
nan_df.head()

all_months_data = all_months_data.dropna(how='all')
all_months_data.head()

# Find or Delete it

all_months_data = all_months_data [all_months_data['Order Date'].str[0:2] !='Or']

### Augment data with additonal columns

all_months_data['Month'] = all_months_data['Order Date'].str[0:2]
all_months_data['Month'] = all_months_data['Month'].astype('int32')
all_months_data.head()

# Task 3 : Add a sales colum

all_months_data['Quantity Ordered'] = pd.to_numeric(all_months_data['Quantity Ordered'])
all_months_data['Price Each'] = pd.to_numeric(all_months_data['Price Each'])

"""all_months_data['Sales'] = all_months_data['Quantity Ordered'].astype('int') * all_months_data['Price Each'].astype('float')
all_months_data.head()"""

all_months_data['Sales'] = all_months_data['Quantity Ordered'] * all_months_data['Price Each']
all_months_data.head()

print(all_months_data['Sales'].sum())

# Q1 - What was the best month of sales? How much was earned in that month?

results = all_months_data.groupby('Month')['Sales'].sum()

"""results.plot(kind='bar')
plt.title("Best Month for Sales")
plt.xlabel("Month number")
plt.ylabel("Sales in USD $")
plt.grid()
plt.show()"""

sns.barplot( x = results.index, y = results.values)
sns.set_style('whitegrid')
plt.title("Best Month for Sales")
plt.xlabel("Month number")
plt.ylabel("Sales in USD $")
plt.grid()
plt.show()

# What city had the highest number of sales

all_months_data['City'] = all_months_data['Purchase Address'].apply(lambda x: x.split(',')[1] .strip() + " (" + x.split(',')[2].strip().split()[0]+ ")")
all_months_data.head()

results_2 = all_months_data.groupby('City')['Sales'].sum().sort_values(ascending=False)
results_2.head()


"""results_2.plot(kind='bar', x='City', y='Sales', figsize=(8,5))
plt.title("City with Highest Sales")
plt.ylabel("Sales in USD ($)")
plt.grid()
plt.show()

"plt.bar(results_2.index, results_2.values)
plt.xticks(rotation='vertical')
plt.title("City with Highest Sales")
plt.ylabel("Sales in USD ($)")
plt.grid()
plt.show()

sns.barplot( x = results_2.index, y = results_2.values)
sns.set_style('whitegrid')
plt.xticks(rotation='vertical')
plt.title("City with Highest Sales")
plt.ylabel("Sales in USD ($)")
plt.grid()
plt.show()"
"""

# Q3 What time should we display advertisments to maximize likehood of customer's buying product?

all_months_data['Order Date'] = pd.to_datetime(all_months_data['Order Date'])
all_months_data['Hour'] = all_months_data['Order Date'].dt.hour
all_months_data['Minute'] = all_months_data['Order Date'].dt.minute
all_months_data.head()

results_3 = all_months_data.groupby('Hour')['Order ID'].count()
results_3.head()

plt.plot(results_3.index, results_3.values)
plt.xticks(results_3.index)
plt.show()

"""results_3.plot(kind='line', x='Hour', y='Order ID')
plt.xticks(results_3.index)
plt.grid()
plt.show()

sns.lineplot(x=results_3.index, y=results_3.values)
plt.xticks(results_3.index)
plt.show()
"""

# Q4 What products are most bought together?

df = all_months_data[all_months_data['Order ID'].duplicated(keep=False)]
df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x : ','.join(x))
df = df[['Order ID', 'Grouped']].drop_duplicates()
df.head()

from itertools import combinations
from collections import Counter

pair_count = Counter()

# Loop over each order
for products in df['Grouped']:
    product_list = products.split(',')          # Convert string to list
    pair_count.update(combinations(product_list, 3))  # Count all pairs

pair_count.most_common(10)

# Q5 What product sold the most? And Why do you think it sold the most?

# all_months_data.head()

results_5 = all_months_data.groupby('Product')['Quantity Ordered'].sum()
results_5.head()

"""plt.plot(results_5.index, results_5.values)
plt.title("most_sold_products")
plt.xlabel("Product")
plt.ylabel("Quantity Ordered")
plt.xticks(results_5.index, rotation = 'vertical')
plt.show()

results_5.plot(kind='bar', x='Product', y='Quantity Ordered', figsize=(8,5))
plt.show()
"""

sns.barplot( x = results_5.index, y = results_5.values)
sns.set_style('whitegrid')
plt.title("most_sold_products")
plt.xlabel("Product")
plt.ylabel("Quantity Ordered")
plt.xticks(results_5.index, rotation = 'vertical')
plt.show()

Prices = all_months_data.groupby('Product')['Price Each'].mean()
print(Prices)

results_6 = all_months_data.groupby('Product').agg({'Quantity Ordered':'sum','Price Each': 'mean'})
results_6.head()

fig,ax1 = plt.subplots()

sns.barplot(x = results_6.index, y = results_6['Quantity Ordered'], ax = ax1)
ax1.set_xticklabels(results_6.index, rotation = 'vertical')
ax1.set_ylabel('Quantity Ordered')
ax1.tick_params(axis='y', labelcolor='blue')
ax1.set_xlabel('Product')

ax2 = ax1.twinx()
sns.lineplot(x = results_6.index, y = results_6['Price Each'], ax = ax2, color = 'green')
ax2.tick_params(axis='y', labelcolor='orange')
ax2.set_ylabel('Price Each')

